plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'application'
}

group 'seedu.OwlMoney'
version '1.3.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.1'
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.5.1')
}

checkstyle {
    toolVersion = '8.23'
}

shadowJar {
    archiveBaseName = "OwlMoney"
    archiveVersion = "v1.3"
    archiveClassifier = null
    archiveAppendix = null
}

application {
    // Change this to your main class.
    mainClassName = "owlmoney.Main"
}

run {
    standardInput = System.in
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task coverage(type: JacocoReport) {
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories =  files(sourceSets.main.output)
    executionData = files(jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = sourceSets.main.allSource.srcDirs.absolutePath
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
}

tasks.coveralls {
    dependsOn coverage
    onlyIf { System.env.'CI' }
}

asciidoctor {
    backends 'html5'
    sourceDir 'docs'
    outputDir "${buildDir}/docs"

    options = [
            template_dirs: [file("${sourceDir}/templates")],
    ]

    attributes = [
            linkcss: true,
            stylesheet: 'gh-pages.css',
            'source-highlighter': 'coderay',
            icons: 'font',
            experimental: true,
            sectlinks: true,
            idprefix: '',  // for compatibility with GitHub preview
            idseparator: '-',
            'site-root': "${sourceDir}",  // must be the same as sourceDir, do not modify
            'site-name': 'OwlMoney',
            'site-githuburl': 'https://github.com/AY1920S1-CS2113T-W17-3/main',
    ]

    options['template_dirs'].each {
        inputs.files fileTree(it)
    }
}

// Copies stylesheets into the directory containing generated HTML files as
// Asciidoctor does not copy linked CSS files to the output directory when rendering.
// This is needed for linked stylesheets and embedded stylesheets which import other files.
task copyStylesheets(type: Copy) {
    from "${asciidoctor.sourceDir}/stylesheets"
    into "${asciidoctor.outputDir}/html5/stylesheets"
}
asciidoctor.dependsOn copyStylesheets

task deployOfflineDocs(type: Copy) {
    into('src/main/resources/docs')

    from ("${asciidoctor.outputDir}/html5") {
        include 'stylesheets/*'
        include 'images/*'
        include 'HelpWindow.html'
    }
}

deployOfflineDocs.dependsOn asciidoctor
processResources.dependsOn deployOfflineDocs

defaultTasks 'clean', 'headless', 'coverage', 'asciidoctor'
